<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.simplemachines.org/xml/modification">
<modification xmlns="http://www.simplemachines.org/xml/modification" xmlns:smf="http://www.simplemachines.org/">
	<id>LHVWB:CustomFormMod</id>
	<version>1.1</version>
		<file name="$boarddir/index.php">
		<operation>
			<search position="before"><![CDATA[
		'xmlhttp' => array('Xml.php', 'XMLhttpMain'),
]]></search>
			<add><![CDATA[		'form' => array('CustomForm.php', 'CustomForm'),
]]></add>
		</operation>
	</file>
	<file name="$sourcedir/Admin.php">
		<operation>
			<search position="before"><![CDATA[
						// Mod Authors for a "ADD AFTER" on this line. Ensure you end your change with a comma. For example:
]]></search>
			<add><![CDATA[						//	Place the Custom Form Mod Link.
						'customform' => array($txt['CustomForm_tabheader']),
]]></add>
		</operation>
		<operation>
			<search position="before"><![CDATA[
	// Load the language and templates....
	loadLanguage('Admin');
	loadTemplate('Admin');
]]></search>
			<add><![CDATA[
	loadLanguage('Modifications');
]]></add>
		</operation>
	</file>
	<file name="$sourcedir/ManageSettings.php">
		<operation>
			<search position="before"><![CDATA[
		// Mod authors, once again, if you have a whole section to add do it AFTER this line, and keep a comma at the end.
]]></search>
			<add><![CDATA[		'customform' => 'CustomFormSettings',
]]></add>
		</operation>
		<operation>
			<search position="end" />
			<add><![CDATA[
//	Fucntion to handle the settings for the Custom Form Mod.
function CustomFormSettings($return_config = false)
{
	global $modSettings, $sourcedir, $txt, $scripturl, $context, $smcFunc;
	
	$config_vars = array();		
	
	//	Get the id of the current element and sanitize it.
	if(isset($_GET['form_id']))
		$form_id = (int) $_GET['form_id'];
		
	//	Get the id of the current element and sanitize it.
	if(isset($_GET['field_id']))
		$field_id = (int) $_GET['field_id'];
	
	//	Do we need to deal with showing form settings?
	if(isset($form_id))
	{
		//	Get some information about this form.
		$request = $smcFunc['db_query']('','
			SELECT title, id_board, output, subject, template_function
			FROM {db_prefix}cf_forms
			WHERE id_form = {int:id_form}',
			array(
				'id_form' => $form_id,
			)
		);
		
		$data = $smcFunc['db_fetch_assoc']($request);
		$smcFunc['db_free_result']($request);
		
		//	No data? Well, show the default settings page then.
		if(empty($data))
			redirectexit("action=admin;area=modsettings;sa=customform;");
		
		//	Do we need to delete the form?
		if(isset($_GET['delete']))
		{
			//	Delete the form itself.
			$smcFunc['db_query']('', '
				DELETE 
				FROM {db_prefix}cf_forms 
				WHERE id_form = {int:id_form}',
				array(
					'id_form' => $form_id,
				)
			);
			
			//	Delete any permissions that belong to the form.
			$smcFunc['db_query']('', '
				DELETE
				FROM {db_prefix}permissions
				WHERE permission = {string:permission}',
				array(
					'permission' => 'custom_forms_'.$form_id,
				)
			);
			
			//	Delete any fields that belong to the form.
			$smcFunc['db_query']('', '
				DELETE 
				FROM {db_prefix}cf_fields 
				WHERE id_form = {int:id_form}',
				array(
					'id_form' => $form_id,
				)
			);
			redirectexit("action=admin;area=modsettings;sa=customform;");
		}
		//	Do we need to update the form?
		elseif(isset($_GET['update']))
		{
			//	Format the form output, so that the WYSIWYG editor works correctly
			if (!empty($_REQUEST['message_mode']) && isset($_REQUEST['output']))
			{
				require_once($sourcedir . '/Subs-Editor.php');
				$_REQUEST['output'] = html_to_bbc($_REQUEST['output']);
				$_REQUEST['output'] = un_htmlspecialchars($_REQUEST['output']);
				$_REQUEST['output'] = $smcFunc['htmlspecialchars']($_REQUEST['output'], ENT_QUOTES);
				preparsecode($_REQUEST['output']);
			}

			//	Perform the updating query.
			$smcFunc['db_query']('', '
				UPDATE {db_prefix}cf_forms
				SET id_board = {int:id_board},
				title = {string:title}, output = {string:output},
				subject = {string:subject}, template_function = {string:template_function}
				WHERE id_form = {int:id_form}',
				array(
					'id_form' => $form_id,
					'id_board' => intval($_REQUEST['form_board_id']),
					'title' => $_REQUEST['form_title'],
					'output' => $_REQUEST['output'],
					'subject' => $_REQUEST['subject'],
					'template_function' => $_REQUEST['template_function'],
				)
			);
			
			//	Update the permissions.
			require_once($sourcedir . '/ManagePermissions.php');
			save_inline_permissions(array('custom_forms_'.$form_id));
			
			redirectexit("action=admin;area=modsettings;sa=customform;form_id=".$form_id.";");
		}
		//	Do we need to add a new field?
		elseif(isset($_GET['add_field']))
		{
			//	Do the creation query.
			$smcFunc['db_insert']('',
				'{db_prefix}cf_fields',
				array('id_form' => 'int'),
				array($form_id),
				array('id_field')
			);
			
			//	Get the field id.
			$field_id = $smcFunc['db_insert_id']('{db_prefix}cf_fields', 'id_field');
			
			//	Take us to the newly created form.
			redirectexit("action=admin;area=modsettings;sa=customform;field_id=".$field_id.";");
		}
		
		//	The template will need some data.
		$context['custom_form_settings'] = array(
			'permissions' => 'custom_forms_'.$form_id,
			'form_board_id' => $data['id_board'],
			'form_title' => $data['title'],
			'subject' => $data['subject'],
			'output' => $data['output'],
			'template_function' => $data['template_function'],
		);
		
		//	Call the function to setup the wysiwyg editor.
		require_once($sourcedir. '/Subs-Editor.php');
		create_control_richedit(array(
			'id' => 'output', 
			'value' => $data['output'], 
			'richvalue' => $data['output'], 
			'width' => '100%',
		));
		
		//	Create the list of fields.
		$list = array(
			'id' => 'customfield_list',
			'title' => $txt['CustomForm_listheading_fields'],
			'no_items_label' => $txt['CustomForm_list_noelements'],
			'get_items' => array(
				'function' => 'list_CustomForm_fields',
				'params' => array($form_id),
			),
			'columns' => array(
				'title' => array(
					'header' => array(
						'value' => $txt['title'],
					),
					'data' => array(
						'function' =>  create_function('$rowData', 'return $rowData[\'title\'];'),
					),
				),
				'text' => array(
					'header' => array(
						'value' => $txt['CustomForm_text'],
					),
					'data' => array(
						'function' =>  create_function('$rowData', 'return $rowData[\'text\'];'),
					),
				),
				'type' => array(
					'header' => array(
						'value' => $txt['CustomForm_type'],
					),
					'data' => array(
						'function' =>  create_function('$rowData', 'return $rowData[\'type\'];'),
					),
				),
				'modify' => array(
					'header' => array(
						'value' => $txt['modify'],
					),
					'data' => array(
						'function' =>  create_function('$rowData', 'return $rowData[\'modify\'];'),
					),
				),
			),
			'additional_rows' => array(
				array(
					'position' => 'below_table_data',
					'value' => '<a href="' . $scripturl . '?action=admin;area=modsettings;sa=customform;form_id='.$form_id.';add_field;">'.$txt['CustomForm_add_field'].'</a>',
					'class' => 'titlebg',
				),
			),
		);
		
		//	Call the function to setup the list for the template.
		require_once($sourcedir . '/Subs-List.php');
		createList($list);
		
		//	Call the function to setup the inline permissions for the template.
		require_once($sourcedir . '/ManagePermissions.php');
		init_inline_permissions(array('custom_forms_'.$form_id));
		
		//	Set up the variables needed by the template.
		$context['settings_title'] = '<a href="'.$scripturl.'?action=admin;area=modsettings;sa=customform;">'.$txt['CustomForm_generalsettings_heading']
		.'</a> -> '.$data['title'].'" '.$txt['CustomForm_form'];
		$context['post_url'] = $scripturl . '?action=admin;area=modsettings;sa=customform;form_id='.$form_id.';update;';
		$context['page_title'] = $txt['CustomForm_tabheader'];
		$context['sub_template'] = 'CustomForm_FormSettings';
		
		//	Load all of the templates that we need.
		loadTemplate('CustomForm');
		loadTemplate('GenericControls');
		loadTemplate('GenericList');
	}
	//	Do we need to deal with showing specific field settings?
	elseif(isset($field_id))
	{
		
		//	Get some information about this field.
		$request = $smcFunc['db_query']('','
			SELECT title, type, id_form, text, type_vars
			FROM {db_prefix}cf_fields
			WHERE id_field = {int:id_field}',
			array(
				'id_field' => $field_id,	
			)
		);
		
		$data = $smcFunc['db_fetch_assoc']($request);
		$smcFunc['db_free_result']($request);
		
		//	No data? Well, show the default settings page then.
		if(empty($data))
			redirectexit("action=admin;area=modsettings;sa=customform;");
		
		//	Get some information about the parent form.
		$request = $smcFunc['db_query']('','
			SELECT title, id_board
			FROM {db_prefix}cf_forms
			WHERE id_form = {int:id_form}',
			array(
				'id_form' => $data['id_form'],	
			)
		);
		
		$parent_data = $smcFunc['db_fetch_assoc']($request);
		$smcFunc['db_free_result']($request);
		
		//	Do we need to delete the field?
		if(isset($_GET['delete']))
		{
			$smcFunc['db_query']('', '
				DELETE 
				FROM {db_prefix}cf_fields 
				WHERE id_field = {int:id_field}',
				array(
					'id_field' => $field_id,
				)
			);
			redirectexit("action=admin;area=modsettings;sa=customform;form_id=".$data['id_form'].";");
		}
		//	Do we need to update the field?
		elseif(isset($_GET['update']))
		{
			//	Perform the updating query.
			$smcFunc['db_query']('', '
				UPDATE {db_prefix}cf_fields
				SET title = {string:title}, text = {string:text},
				type = {string:type}, type_vars = {string:type_vars}
				WHERE id_field = {int:id_field}',
				array(
					'id_field' => $field_id,
					'title' => $_REQUEST['field_title'],
					'text' => $_REQUEST['field_text'],
					'type' => $_REQUEST['field_type'],
					'type_vars' => $_REQUEST['field_type_vars'],
				)
			);
			redirectexit("action=admin;area=modsettings;sa=customform;form_id=".$data['id_form'].";");
		}
		//	Do we need to move the field?
		elseif(isset($_GET['moveup'])
		|| isset($_GET['movedown']))
		{
			$factor = isset($_GET['moveup']) ? -1 : 1;
			
			//	Get a list of all of the 'siblings' of this field.
			$request = $smcFunc['db_query']('', '
				SELECT id_field
				FROM {db_prefix}cf_fields
				WHERE id_form = {int:id_form}
				ORDER BY id_field',
				array(
					'id_form' => $data['id_form']
				)
			);
			
			$siblings = array();
			$count = 0;
			$field_pos = 0;
			
			//	Make a list of the siblings
			While($row = $smcFunc['db_fetch_assoc']($request))
			{
				//	Get the spot of the current field;
				if($row['id_field'] == $field_id)
					$field_pos = $count;
				//	Store the necessary information.
				$siblings[] = $row['id_field'];
				$count++;
			}
			
			//	Free the db result.
			$smcFunc['db_free_result']($request);		
			
			//	Can we move the field?
			if(!($count == 0)
			&& !empty($siblings)
			&& !(($field_pos == 0) && ($factor == -1))
			&& !(($field_pos == $count-1) && ($factor == 1)))
			{
				$replace_id = $siblings[$field_pos+$factor];
				//	Perform the rather hacky updating queries. - They do work, just hackily! ;D
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}cf_fields
					SET id_field = \'0\'
					WHERE id_field = {int:field_id}',
					array(
						'field_id' => $field_id
					)
				);
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}cf_fields
					SET id_field = {int:field_id}
					WHERE id_field = {int:replace_id}',
					array(
						'field_id' => $field_id,
						'replace_id' => $replace_id
					)
				);
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}cf_fields
					SET id_field = {int:replace_id}
					WHERE id_field = \'0\'',
					array(
						'replace_id' => $replace_id
					)
				);
			}
			//	Take us back to the form setting page.
			redirectexit("action=admin;area=modsettings;sa=customform;form_id=".$data['id_form'].";");
		}
		
		//	Otherwise just show the settings for this field.			
		$config_vars = array(
			array('text', 'field_title', 'value' => $data['title'], 'text_label' => $txt['title'], 'help' => 'CustomForm_field_title'),
			array('text', 'field_text', 'value' => $data['text'], 'text_label' => $txt['CustomForm_text'], 'help' => 'CustomForm_text'),
			array('select', 'field_type', 'value' => $data['type'], 'text_label' => $txt['CustomForm_type'], 'help' => 'CustomForm_type', 
				array(
					'textbox' => $txt['CustomForm_textbox'],
					'largetextbox' => $txt['CustomForm_large_textbox'],
					'checkbox' => $txt['CustomForm_checkbox'], 
					'selectbox' => $txt['CustomForm_selectionbox'],
					'float' => $txt['CustomForm_float'],
					'int' => $txt['CustomForm_int'],
				)
			),			
			array('text', 'field_type_vars', 'value' => $data['type_vars'], 'text_label' => $txt['CustomForm_type_vars'], 'help' => 'CustomForm_type_vars'),	
		);
		
		//	Set up the variables needed by the template.
		$context['settings_title'] = '<a href="'.$scripturl.'?action=admin;area=modsettings;sa=customform;">'.$txt['CustomForm_generalsettings_heading']
		.'</a> -> <a href="'.$scripturl.'?action=admin;area=modsettings;sa=customform;form_id='.$data['id_form'].';">"'.$parent_data['title'].'" '.$txt['CustomForm_form']
		.'</a> -> "'.$data['title'].'" '.$txt['CustomForm_field'];	
		$context['post_url'] = $scripturl . '?action=admin;area=modsettings;sa=customform;field_id='.$field_id.';update;';
		$context['page_title'] = $txt['CustomForm_tabheader'];
		$context['sub_template'] = 'show_settings';
		
		//	Finally prepare the settings array to be shown by the 'show_settings' template.
		prepareDBSettingContext($config_vars);
	}
	//	Do we need to add a new form?
	elseif(isset($_GET['add_form']))
	{
		//	Do the creation query.
		$smcFunc['db_insert']('',
			'{db_prefix}cf_forms',
			array('id_board' => 'int'),
			array('0'),
			array('id_form')
		);
		
		//	Get a list of all of the form ids.
		$form_id = $smcFunc['db_insert_id']('{db_prefix}cf_forms', 'id_form');
		
		//	Take us to the newly created form.
		redirectexit("action=admin;area=modsettings;sa=customform;form_id=".$form_id.";");
	}
	//	Otherwise show the generic list of custom forms.
	else
	{
		$config_vars = array(
			array('permissions', 'CustomForm_view_perms'),
			array('text', 'CustomForm_view_title'),
			array('text', 'CustomForm_view_text'),
		);
		
		//	Save the permissions?
		if(isset($_GET['update']))
		{
			//	Make sure that an admin is doing the updating.
			checkSession();
			
			//	Save the inline permissions.
			require_once($sourcedir.'/ManagePermissions.php');
			save_inline_permissions(array('CustomForm_view_perms'));
			
			//	Save the config vars.
			saveDBSettings($config_vars);
			redirectexit("action=admin;area=modsettings;sa=customform;");
		}
		
		$list = array(
			'id' => 'CustomForm_list',
			'title' => $txt['CustomForm_tabheader'],
			'no_items_label' => $txt['CustomForm_list_noelements'],
			'get_items' => array(
				'function' => 'list_CustomForms',
			),
			'columns' => array(
				'title' => array(
					'header' => array(
						'value' => $txt['title'],
					),
					'data' => array(
						'function' =>  create_function('$rowData', 'return $rowData[\'title\'];'),
					),
				),
				'board' => array(
					'header' => array(
						'value' => $txt['CustomForm_board_id'],
					),
					'data' => array(
						'function' =>  create_function('$rowData', 'return $rowData[\'board\'];'),
					),
				),
				'permissions' => array(
					'header' => array(
						'value' => $txt['edit_permissions'],
					),
					'data' => array(
						'function' =>  create_function('$rowData', 'return $rowData[\'permissions\'];'),
					),
				),
				'modify' => array(
					'header' => array(
						'value' => $txt['modify'],
					),
					'data' => array(
						'function' =>  create_function('$rowData', 'return $rowData[\'modify\'];'),
					),
				),
			),
			'additional_rows' => array(
				array(
					'position' => 'below_table_data',
					'value' => '<a href="' . $scripturl . '?action=admin;area=modsettings;sa=customform;add_form;">'.$txt['CustomForm_add_form'].'</a>',
					'class' => 'titlebg',
				),
			),
		);

		
		//	Call the function to setup the list for the template.
		require_once($sourcedir . '/Subs-List.php');
		createList($list);
		
		//	Set up the variables needed by the template.
		$context['settings_title'] = $txt['CustomForm_generalsettings_heading'];	
		$context['page_title'] = $txt['CustomForm_tabheader'];
		$context['default_list'] = 'CustomForm_list';
		$context['post_url'] = $scripturl . '?action=admin;area=modsettings;sa=customform;update';
		loadTemplate('CustomForm');
		
		$context['sub_template'] = 'CustomForm_GeneralSettings';
		
		//	Finally prepare the settings array to be shown by the 'show_settings' template.
		prepareDBSettingContext($config_vars);
	}
}

//	Fucntion to produce a list of custom forms.
function list_CustomForms()
{
	global $txt, $scripturl, $smcFunc;
	
	//	Get the data from the cf_forms table.
	$request = $smcFunc['db_query']('','
		SELECT id_form, title, id_board
		FROM {db_prefix}cf_forms'
	);
	
	//	Get some general permissions info.
	$permissions = get_CustomForm_permissions();
	$membergroups = get_CustomForm_membergroups();
	$list = array();

	//	Go through every form.
	While($row = $smcFunc['db_fetch_assoc']($request))
	{
		//	Create a list of the groups which can use this form.
		$permissions_string = $txt['admin'];
		if(isset($permissions['custom_forms_'.$row['id_form']]))
			foreach($permissions['custom_forms_'.$row['id_form']] as $membergroup_id)
					$permissions_string .= ', '.$membergroups[$membergroup_id];
		
		//	Try to find the name of the board.
		$board_name = 'Invalid Board';
		
		$board_request = $smcFunc['db_query']('','
			SELECT name 
			FROM {db_prefix}boards
			WHERE id_board = {int:id_board}
			AND redirect = \'\'',
			array(
				'id_board' => $row['id_board'],
			)
		);
		
		//	Try to get the name from the returned row.
		if($board = $smcFunc['db_fetch_assoc']($board_request))
			$board_name = $board['name'];
		$smcFunc['db_free_result']($board_request);
		
		//	Add the current entry into the list.
		$list[] = array(
			'title' => $row['title'],
			'board' => $row['id_board'].' ("'.$board_name.'")',
			'permissions' => $permissions_string,
			'modify' => '
			<table width="100%">
				<tr>
					<td width="50%" style="text-align:center;">
						<a href="'.$scripturl.'?action=admin;area=modsettings;sa=customform;form_id='.$row['id_form'].';">
							('.$txt['CustomForm_edit'].')
						</a>
					</td>
					<td width="50%" style="text-align:center;">
						<a href="'.$scripturl.'?action=admin;area=modsettings;sa=customform;form_id='.$row['id_form'].';delete;" onclick="return confirm(\''.$txt['CustomForm_delete_warning'].'\')" >
							('.$txt['delete'].')
						</a>
					</td>
				</tr>
			</table>',
		);
	}		
	$smcFunc['db_free_result']($request);
	return $list;
}

//	Fucntion to produce a list of custom form fields.
function list_CustomForm_fields($nul, $nul, $nul, $id)
{
	global $txt, $scripturl, $smcFunc;
	
	//	Get the data from the cf_fields table.
	$request = $smcFunc['db_query']('','
		SELECT id_field, title, type, text
		FROM {db_prefix}cf_fields
		WHERE id_form = {int:id_form}
		ORDER BY id_field',
		array(
			'id_form' => $id,
		)
	);
	
	$data = array();
	
	while($row = $smcFunc['db_fetch_assoc']($request))
		$data[] = $row;
	
	$list = array();
	$i = 1;
	$end = count($data);
	
	//	Go through every field.
	foreach($data as $field)
	{
		//	Convert the field type into the proper text strings.
		$type = str_replace(
			//	Search array.
			array('largetextbox', 'textbox', 'checkbox', 'selectbox', 'float', 'int'),
			//	Replace array.
			array( $txt['CustomForm_large_textbox'], $txt['CustomForm_textbox'], $txt['CustomForm_checkbox'], $txt['CustomForm_selectionbox'], $txt['CustomForm_float'], $txt['CustomForm_int']), 
			$field['type']
		);
		
		//	Add the current entry into the list.
		$list[] = array(
			'title' => $field['title'],
			'text' => $field['text'],
			'type' => $type,
			'modify' => '
			<table width="100%">
				<tr>
					<td width="25%" style="text-align:center;">
						<a href="'.$scripturl.'?action=admin;area=modsettings;sa=customform;field_id='.$field['id_field'].';moveup;">
							'.(($i != 1) ? '('.$txt['CustomForm_moveup'].')' : '').'
						</a>
					</td>
					<td width="25%" style="text-align:center;">
						<a href="'.$scripturl.'?action=admin;area=modsettings;sa=customform;field_id='.$field['id_field'].';movedown;" >
							'.(($i != $end) ? '('.$txt['CustomForm_movedown'].')' : '').'
						</a>
					</td>
					<td width="50%" style="text-align:center;">
						<a href="'.$scripturl.'?action=admin;area=modsettings;sa=customform;field_id='.$field['id_field'].';">
							('.$txt['CustomForm_edit'].')
						</a>
					</td>
					<td width="50%" style="text-align:center;">
						<a href="'.$scripturl.'?action=admin;area=modsettings;sa=customform;field_id='.$field['id_field'].';delete;" onclick="return confirm(\''.$txt['CustomForm_delete_warning'].'\')" >
							('.$txt['delete'].')
						</a>
					</td>
				</tr>
			</table>',
		);
		$i++;
	}		
	$smcFunc['db_free_result']($request);
	return $list;
}

//	Get all of the permissions settings for the Custom Form Mod.
function get_CustomForm_permissions()
{
	global $context, $smcFunc;
	
	$permissions = array();
	
	// 	Get the permissions for the Custom Menu System.
	$request = $smcFunc['db_query']('', '
		SELECT permission, id_group
		FROM {db_prefix}permissions
		WHERE permission 
		LIKE \'custom_forms_%\''
	);
		
	//	Store the data in a way that is easy to use. Permission => array (id_groups)
	while ($row = $smcFunc['db_fetch_assoc']($request))
		$permissions[$row['permission']][] = $row['id_group'];
		
	//	Don't forget to free the request!!!
	$smcFunc['db_free_result']($request);
	
	return $permissions;
}

//	Simple function to return all the membergroups.
function get_CustomForm_membergroups()
{
	global $smcFunc, $modSettings, $txt;
	
	$membergroups = array();
	
	//	Fix up a few errors that occur, by adding guests and regular members to the list.
	$membergroups['-1'] = $txt['guests'];
	$membergroups['0'] = $txt['users'];
	
	// Get the permissions from the table, make sure we only get them for the Menu System.
	$request = $smcFunc['db_query']('', '
		SELECT ID_GROUP, group_name
		FROM {db_prefix}membergroups
		' . (($modSettings['permission_enable_postgroups']) ? '' : 'WHERE min_posts = -1')
	);
	
	//	Store the data in a way that is easy to use. Permission => array (id_groups)
	while ($row = $smcFunc['db_fetch_assoc']($request))
		$membergroups[$row['ID_GROUP']] = $row['group_name'];
	
	//	Don't forget to free the request!!!
	$smcFunc['db_free_result']($request);
	
	return $membergroups;
}
]]></add>
		</operation>
	</file>
</modification>
